package test;

import com.captainalm.lib.mesh.crypto.IHasher;
import com.captainalm.lib.mesh.packets.Packet;
import com.captainalm.lib.mesh.packets.PacketBytesInputStream;
import com.captainalm.lib.mesh.packets.PacketType;
import com.captainalm.lib.mesh.packets.data.SinglePayload;
import com.captainalm.lib.mesh.utils.LengthClampedInputStream;
import com.captainalm.lib.mesh.utils.StreamEquals;

import java.io.ByteArrayInputStream;
import java.io.IOException;

/**
 * Provides some tests.
 *
 * @author Alfred Manville
 */
public class Tests {
    public static void main(String[] args) {
        IHasher hasher = new Hasher();
        SinglePayload sp = new SinglePayload(new byte[] {1,3,3,7});
        println(sp.getPayload());
        Packet packet = new Packet(sp.getSize()).setPacketType(PacketType.DirectHandshakeAccept).setPacketData(sp).setTTL((byte) 4).timeStamp().calculateHash(hasher);
        println(packet.timeStampInRange());
        println(packet.verifyHash(hasher));
        println(packet.getPacketBytes());
        byte[] toread = new byte[packet.getPacketBytes().length * 2];
        System.arraycopy(packet.getPacketBytes(), 0, toread, 0, packet.getPacketBytes().length);
        System.arraycopy(packet.getPacketBytes(),0 , toread, packet.getPacketBytes().length, packet.getPacketBytes().length);
        sp = (SinglePayload) (Packet.getPacketFromBytes(packet.getPacketBytes())).getPacketData(true);
        println(sp.getPayload());
        PacketBytesInputStream ins = new PacketBytesInputStream(new LengthClampedInputStream(new ByteArrayInputStream(toread), toread.length));
        byte[] buff = null;
        try {
            while ((buff = ins.readNext()) != null) {
                println(buff);
            }
        } catch (IOException e) {
            //e.printStackTrace();
        }
        byte[] pk = new byte[] {0, 1, 4, -64, 0, 0, 0, 0, 104, 7, -18, 56, -36, -126, 30, 13, 0, -21, 91, 112, 114, 73, 113, 113, -31, 14, -103, 27, 11, 26, -102, -112, 10, -56, 77, 23, 104, -68, 95, 107, 124, 25, 55, -8, -62, -64, 73, 122, -72, -126, -128, 32, 91, 107, 115, -57, -86, -12, -97, -57, -10, 68, -12, 5, 31, -80, 70, -113, -74, 64, -88, 110, 18, 6, 58, 4, -108, 108, 122, -103, 74, -119, -88, -120, -16, -73, 28, -37, -82, -9, 1, -92, 0, 2, -61, 111, -56, 95, 21, 27, 82, 20, 1, 60, -113, -120, 31, -25, 8, -91, 3, -15, 71, -5, -15, -115, 70, -47, 108, 33, -32, 38, -99, -20, -62, 107, -91, 38, 14, -42, 28, 6, -111, 122, -58, 73, 42, -66, 85, -113, 24, -5, 77, -22, 18, -85, 12, -75, 50, 75, 86, -64, 68, -87, 41, -7, 3, -68, 24, -111, 122, -13, 72, 85, -82, -78, 102, 56, -128, 1, 93, -80, -74, -33, 86, 51, 119, -111, -69, 59, 36, 103, -4, 68, 45, 17, -127, -91, -17, -70, 84, -38, 51, -75, 100, 43, -97, -19, 101, -69, -23, 56, -82, 27, -100, 78, -27, -101, -105, -58, 67, 44, -23, -28, 21, -116, -75, 106, -128, 117, -52, 5, -38, -125, 7, 65, 28, -86, 75, 23, -13, -46, -68, 14, -126, 91, 53, 80, 117, -37, 103, 34, -43, 67, -85, -118, -16, 70, -47, 48, -118, 51, 39, 34, -54, 85, 59, 30, 73, 8, 115, 0, -59, 3, -63, -89, 20, 114, -50, -26, 66, 66, 55, -93, -54, -46, -8, 73, -82, 97, -86, 37, -68, -57, 58, 9, 106, 93, 1, 31, 122, 84, 127, -90, 32, 18, -84, 59, 83, 116, 39, -60, -2, -64, 73, -64, 112, -82, 127, 102, -102, 71, -85, 83, -106, 28, -55, -93, 113, 78, -7, 106, 1, 17, -128, -63, 125, -10, -96, 16, 26, 109, -124, -43, -82, -40, 53, -120, 76, -30, -68, -57, 85, 9, 5, -71, 20, -112, -7, 84, -88, -62, 19, -104, 24, 75, -24, -124, 33, 92, -30, 66, -4, 39, -61, 91, -45, 53, 10, 118, -102, 38, -87, -100, 44, -76, 93, -20, -71, 113, -20, 104, 20, -125, 96, 59, 3, -6, 31, 127, -118, -88, 72, 66, -50, 80, -111, 34, -5, 117, 89, 23, -102, 56, 92, 123, 104, 28, 80, 98, -37, 3, 113, 10, -60, -86, 63, -120, -95, -63, -31, -120, -66, 96, -106, 77, -41, -105, -84, -102, -116, -67, 56, -53, 12, 26, -54, -82, -5, 58, 74, 114, -120, -110, 92, 33, 36, -84, 71, 9, -112, 79, -54, 41, 19, -106, 96, 35, 118, -64, 19, -20, -15, -78, -80, -43, -124, 115, -45, -75, -73, 124, -97, -88, -5, 112, 3, 22, 103, 41, 81, 42, -85, -59, -84, 19, 82, -125, 37, 117, -87, -2, 53, 97, 13, -96, 100, -37, -93, -55, 5, -128, -76, -123, 5, 77, -8, 97, 25, -10, -69, -119, -10, -7, -118, -50, 58, 33, 36, -106, 32, -113, 56, -68, -88, 43, -87, -95, 113, -86, -115, 121, 66, 56, 74, 15, 20, -93, 81, -91, -39, 18, -110, -13, 43, 35, 44, 126, 118, -79, -83, 118, 119, -75, -101, -39, 61, 37, -88, 89, 96, 25, 52, -120, -77, 97, -4, -43, -71, -112, 51, 29, -20, 119, 26, 10, 101, -114, -20, 83, 118, 64, 119, 116, -52, 26, 71, -128, -109, 42, -13, 67, -54, 91, -88, 102, -66, 26, 78, -88, 64, -60, 69, 55, -76, -118, 59, 63, 85, -64, 122, -25, 37, -87, 68, 1, -63, -82, 34, 93, 36, 60, -94, 3, 38, -101, 71, -70, -106, -52, -117, -103, -83, -106, 112, -29, 36, 74, -93, -88, 30, -22, -111, 32, -41, -9, -114, -13, -119, -51, -24, 80, 34, 62, 0, 68, -10, 18, -70, -97, 92, 74, -2, -23, -118, -24, -112, 49, 41, 1, -84, 75, 38, 118, 5, 106, -54, -89, 76, -102, 28, 83, 114, -100, 42, -117, 85, -79, -88, -123, 35, 56, 5, -75, -52, -89, -122, 121, -51, -63, 4, -16, -8, 36, 19, -76, 72, 22, 92, 0, 62, 20, 42, -76, -72, -110, -36, 23, 51, -63, 17, -115, -60, 44, 67, -16, 102, -121, 33, 124, -77, 34, -86, 31, -43, -20, 54, 50, -106, -103, 111, -101, -56, -103, 121, 96, 78, -47, -62, -72, -31, 63, -35, -121, 56, -15, 69, 17, -127, 71, 120, -118, 102, -89, 39, -92, -58, -4, -24, 96, 60, 74, 126, 61, -123, -85, 41, -6, 11, -24, -104, 54, 115, 89, -89, 48, -30, -100, -3, 103, 121, -101, 114, 62, -34, -117, 78, 79, -90, -91, 121, 65, 124, -68, -29, 108, -15, 56, 13, 85, 100, 110, 21, 1, -70, 29, 69, 109, -65, 74, 64, 85, -48, 98, -64, -86, 57, 81, 37, -67, 94, 84, 97, 126, -26, -120, -83, -74, 68, -33, 100, -90, 85, -6, 64, 16, -112, 54, -19, 74, 49, -122, -96, -118, 2, 83, 112, -60, 85, 79, -91, 124, -61, -121, -105, 66, -108, -109, 109, 111, 54, 67, -52, 10, 3, 13, -22, 5, -6, 106, -60, 12, 39, 11, -82, -11, -65, 56, 87, 94, -108, 119, 57, -91, 106, 16, 42, -44, -115, -95, -14, -74, 78, -75, -75, -127, -46, 18, -106, -43, 17, 15, -92, 115, -11, 119, 5, 123, 48, -49, 53, 52, -51, 62, 12, 74, -74, 66, -127, 14, -109, 5, -22, -116, 1, -82, 8, -85, 116, 58, 0, -126, -106, 76, -74, 73, 100, 113, -24, 40, -9, 105, -81, 4, -80, -127, -115, -86, 106, -96, 10, 16, 76, -22, 0, 31, -10, 71, 105, -37, -56, 21, -12, 34, 46, 56, -67, 73, 67, 72, 53, -14, 39, -73, 86, 49, -117, -62, 114, -31, 48, 98, -125, 115, 121, 105, 20, -49, -14, 97, -54, 72, 68, -114, -65, -52, -64, 123, 26, 17, -127, -55, 94, -71, -89, -63, -39, 16, 88, 36, -32, 5, 115, -70, 12, -111, 118, -103, 55, 74, 51, 42, -106, 30, 54, -80, -72, -21, -124, -52, -18, -110, 30, 111, 49, 51, -76, -70, 88, 90, -64, -106, 29, -57, -95, 99, -13, -55, 87, 54, 57, 44, 20, 67, -6, 12, 42, -92, 60, -112, 126, -69, -92, -36, -90, 7, 3, -126, 66, 73, -70, -98, 55, 22, -65, 28, -126, 35, 10, -13, -67, -38, -108, 70, -60, 104, 24, -7, 74, 115, 48, -52, -51, -77, 41, 77, -66, -42, 22, 127, -12, -67, 107, 89, 109, 17, -122, -53, 85, 69, -74, 65, 102, -121, -12, 64, -68, -35, 53, 0, 97, -89, 46, 68, 53, 23, -43, 11, -71, -127, -128, 13, 95, -26, 26, 78, -75, 36, 21, -57, 39, 116, 121, -119, 29, 27, -97, 62, -68, -112, 58, 56, -116, -45, -126, 104, 125, 75, 109, 106, -59, 66, 70, 59, 99, 71, -26, 17, -35, -53, -63, -50, -64, 88, -76, 104, -84, -38, -118, -104, 112, 105, -84, -69, 56, -125, 67, 35, 95, 7, 15, -97, 86, -66, 19, 64, 60, 3, -107, -29, 109, 119, 27, 77, 8, 77, -93, 50, 112, 87, -60, -48, -126, 110, 73, 85, -109, -9, -121, -116, -10, 99, 10, -35, 99, -68, -128, -22, -109, -127, 4, 124, -11, 34, 120, 73, 96, 53, -10, 106, -33, 2, -95, 58, 13, -48, 22, 54, 118, -92};
        byte[] pk2 = new byte[] {};
        println(pk.length);
        Packet pkp = Packet.getPacketFromBytes(pk);
        println(pkp.verifyHash(hasher));
        pkp.calculateHash(hasher);
        println(pkp.verifyHash(hasher));
        println(pk);
        println(pk2);
        try {
            StreamEquals.streamEqualsArray(new ByteArrayInputStream(pk),pk2);
        } catch (IOException e) {
        }
    }

    private static void println(byte[] bytes) {
        if (bytes != null) {
            System.out.print(bytes.length);
            System.out.print(" - [");
            for (byte b : bytes)
                System.out.printf("%02x", b);
            System.out.println("]");
            return;
        }
        System.out.println("<null>");
    }

    private static void println(boolean b) {
        System.out.println(b);
    }

    private static void println(int i) {
        System.out.println(i);
    }

    private static void println(String s) {
        System.out.println(s);
    }
}
